{
  
    
        "post0": {
            "title": "Probability Theory 1 - The Basics",
            "content": "Sometimes when we repeat actions, we achieve different random outcomes - the prototypical examples cited usually being tossing a coin, rolling a die, or any form of gambling. As mathematicians we would like to design a framework within which we express the uncertainty associated with the outcome. Modern probability theory emerged in this context in the 17th century through the study of “games of chance” and has since grown due to contribution from important figures such as Andrei Kolmogorov, Andrey Markov, Thomas Bayes, Carl Gauss, and many more. . Basic definitions . There are a few questions that need to be tackled when first trying to design our definitions: . How should we represent outcomes to which we assign probabilities? | What kinds of outcomes should we allow in our framework? | What is a probability and how can we assign one to an outcome? | We address these problems one a time below. . Sample spaces . A sample space is a set $ Omega$. An element $ omega in Omega$ is called a sample and a subset $A subseteq Omega$ is called an event. . Intuitively, a sample is an outcome of a random occurance and a sample space is simply the set of all possible outcomes. Rarely, we can further suppose that $ Omega$ has some additional kind of structure, such as being a metric space or Riemannian manifold. This allows us to talk about relationships between samples in the context of the intrinsic structure of $ Omega$; however this is far beyond the scope of what we cover in this post. . Here are some examples of how some random phenomena can be represented as a sample space. . In the case of tossing a coin once, we might have $ Omega = { text{heads}, text{tails}}$. | If we were studying the annual number of traffic accidents at a busy intersection, we would have $ Omega = N_0$. | If we were randomly throwing darts at a square dart board of unit side length, then we could have $ Omega = [0,1] times [0,1]$, where $ omega in Omega$ would represent the location on the board where the dart lands. | . As can be seen from the examples, beginning with a set gives us a lot of flexibility in the kinds of randomness we can model. . Sigma Algebras . Given the definition of an event, we can use the language of set operations to express more complicated outcomes. For example, in the second example, if $A_n := {n }$ for every $n geq 0$, then $A := bigcup_{n geq 0} A_{2n}$ is the event that an even number of accidents occur. On the other hand, in the third example, if $B := [0,1/2] times [0,1]$ and $C := [0,1] times [0,1/2]$, then $D := B cap C = [0,1/2] times [0,1/2]$ would be the vent that the dart lands in the bottom-left quadrant of the board. . This leads us to the answer of the second question. In theory, we may choose to allow any set in $ mathcal P( Omega)$, but since it is useful to speak about events in the way above, it makes sense to define the “good” events in $ Omega$ as follows. . A $ sigma$-algebra is a collection of subsets $ mathcal F subseteq mathcal P( Omega)$ that satisfies the properties 1.$ Omega in F$ 1.if $A in F$, then $A^c := Omega setminus A in mathcal F$ 1.if {A_n : n geq 1} is a sequence of events with $A_n in mathcal F$ for every $n geq 1$, then $A := bigcup_{n geq 1} A_n in mathcal F$ . Note that combining properties 2. and 3. with De Morgan’s laws, we obtain 1.3’. if ${A_}$ . Probability measures . This leads us to the answer of the next question. In theory, we may choose to allow any subset of P( Omega). Since it is useful to speak about events as in the way, it makes sense to define the following. . A sigma-algebra is a collection of subsets F subset P( Omega) such that the following hold: 1) Omega in F 2) if A in F, then A^c := Omega setminus A in F 3) if {A_n : n geq 1} is a sequence of events with A_n in F for every n geq 1, then A := bigcup_{n geq 1} A_n in F . Note that using 2), 3), and De Morgan’s laws, we obtain 3’) if {A_n : n geq 1} is a sequence of events with A_n in F for every n geq 1, then A := bigcap_{n geq 1} A_n in F and in fact, a sigma-algebra can be equivalently defined using 3’) instead of 3). . Intuitively, F represents the kinds of events we are able to observe from a random occurance. . Usually, at first glance of the definition of a sigma-algebra, it seems confusing as to why we don’t allow for uncountable unions in 3). Before explaining why it is necessary to restrict ourselves in this way, let’s finally define what exactly is a probability. . A probability measure (or simply a probability) is a function P : F to [0,1] that satisfies the following: 1) (Non-negativity) For any A in F, P(A) geq 0 2) (Boundedness) P( Omega) = 1 3) (countable additivity) If {A_n : n geq 1} is a sequence of DISJOINT events with A_n in F for every n geq 1, then P( bigcup_{n geq 1} A_n) = sum_{n geq 1} P(A_n) . Given Omega, F, and P as defined above, a triple ( Omega, F, P) is called a probabilty space. . For example, . In the first example, we have Omega = {H, T}, F = { emptyset, {H}, {T}, Omega}, and P({H}) = P{{T}} = 1/2 | In the third example, we have Omega = [0,1] times [0,1], F is the set of borel-measurable subsets of Omega, and P = lambda is Lebesgue measure. | . If we allow uncountable unions in the definition of a sigma-algebra, then given a probability measure, it is possible to a build an event with probability strictly greater than one. In other words, it would break our otherwise very nice definition of a probability measure. We’ll explain this shortcoming more in-depth in a later post. . At last, we finally have the basic ground work on which we can build more probability theory. To end, here are some properties of P which follow directly from the definition and set operation. It’s a good exercise to try proving them! . - P(A^c) = 1 - P(A) - P( emptyset) = 0 -(monotonicity) if A subseteq B, then P(A) leq P(B) -(sub-additivity) Given a sequence of events {A_n : n geq 1} which may not necessarily be disjoint, P( bigcup_{n geq 1} A_n) leq sum_{n geq 1} P(A_n) -(Continuity from below) Given {A_n : n geq 1} with A_n subseteq A_{n+1} then P( bigcup_{n geq 1} A_n) = lim_{n to infty} P(A_n) -(Continuity from above) Given {A_n : n geq 1} with A_{n+1} subseteq A_n then P( bigcap_{n geq 1} A_n) = lim_{n to infty} P(A_n) .",
            "url": "https://rolandriachi.github.io/probable-potato/markdown/2021/08/12/prob-1.html",
            "relUrl": "/markdown/2021/08/12/prob-1.html",
            "date": " • Aug 12, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rolandriachi.github.io/probable-potato/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rolandriachi.github.io/probable-potato/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". Hi, my name is Roland Riachi! I am a MSc Mathematics and Statistics student at McGill University, under the supervisor of Professor Linan Chen. . My interests primarily revolve around probability theory and computer science. More specifically, my current focus includes stochastic differential equations (SDEs), Gaussian Free Fields, and theoretical machine learning. . Many thanks to Github’s automatic repository name generator for suggesting this apt name for this blog! I plan to use this platform as a means for practising writing and documenting my progression as a mathematician. Along the way, I hope that anyone who stumbles upon this project can take something away from reading my posts. .",
          "url": "https://rolandriachi.github.io/probable-potato/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rolandriachi.github.io/probable-potato/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}